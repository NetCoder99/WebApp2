@model WebApp2.Models.Account.UserAccount

@{
    ViewBag.Title = "EditAccount";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Ajax.BeginForm("EditAccount", "Account", new AjaxOptions { OnSuccess = "onSuccess" }))
{
    {
        @Html.AntiForgeryToken()

        <div class="logo mb-3">
            <div class="col-md-12 text-center">
                <h2>Edit user account</h2>
            </div>
        </div>

        @Html.HiddenFor(Model => Model.UserDetailId);

        <div class="row">
            <div class="col-xs-2"></div>
            <div class="col-xs-8">
                <div>
                    @Html.ActionLink("Back to Manager Users", "ManageAccounts", "Account")
                    <div id="message_div" style="display:inline;float:right;display:none;">
                        <img src="~/Content/Icons/success.png" style="height:18px;" />
                        <span id="message">Message</span>
                    </div>
                </div>
                <hr class="margin_bottom_none" />
                <strong>Required Fields: Need this for access to the web site.</strong>
                <hr class="margin_top_none" />
                <div class="row margin_bottom_small">
                    <div class="form-group col-xs-6 margin_bottom_small">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger static_error" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-xs-6 margin_bottom_small">
                        @Html.LabelFor(model => model.PassWord, htmlAttributes: new { @class = "control-label" })
                        @Html.PasswordFor(model => model.PassWord, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.PassWord, "", new { @class = "text-danger static_error" })
                        <span class="pssword_match_error text-danger static_error"></span>
                    </div>

                    <div class="form-group col-xs-6 margin_bottom_small">
                        @Html.LabelFor(model => model.PassWordConfirm, htmlAttributes: new { @class = "control-label " })
                        @Html.PasswordFor(model => model.PassWordConfirm, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.PassWordConfirm, "", new { @class = "text-danger static_error pssword_confirm_error" })
                    </div>
                </div>

                <hr class="margin_bottom_none margin_top_none" />
                <strong>Optional Fields: Personal Information</strong>
                <hr class="margin_top_none" />

                <div class="row">
                    <div class="form-group col-xs-6">
                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger static_error" })
                    </div>

                    <div class="form-group col-xs-6">
                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger static_error" })
                    </div>
                </div>

                <div class="row">
                    <div class="form-group col-xs-6">
                        @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control small_inp_box" } })
                        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger static_error" })
                    </div>

                    <div class="form-group col-xs-6">
                        @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control small_inp_box phone_number" } })
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger static_error" })
                    </div>
                </div>
                <div class="row">

                    <div class="form-group col-xs-6">
                        <label class="control-label">Notification Types</label>
                        <div class="form-group " style="margin-top:5px;">
                            <div class="col-xs-6">
                                @Html.CheckBoxFor(m => m.PrefEmail, new { @checked = "true", @class = "" })
                                @Html.LabelFor(model => model.PrefEmail, htmlAttributes: new { @class = "control-label margin_left_vsmall" })
                            </div>
                            <div class="col-xs-6">
                                @Html.CheckBoxFor(m => m.PrefText, new { @checked = "checked" })
                                @Html.LabelFor(model => model.PrefText, htmlAttributes: new { @class = "control-label margin_left_vsmall" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>


        </div>

        <div class="form-group col-xs-3 text-center "></div>
        <div class="form-group col-xs-4 text-center ">
            <button id="btn_submit" type="submit" class=" btn btn-block mybtn btn-primary tx-tfm">Save changes</button>
        </div>
        <div class="form-group col-xs-3 text-center "></div>

    }
}

@section scripts{
    <script>
        $(document).ready(function () {
            console.log("ready to rock and roll....");
            $(".small_inp_box:first").focus();
            $(".small_inp_box").addClass("lgreen");

            jQuery.validator.addMethod("nonnumeric",
                function (value, element, params) {
                    $.validator.messages.nonnumeric =
                        jQuery.validator.format("This field cannot contain numeric characters.")
                    return value.match(/\d+/g) == null;
                },
                $.validator.messages.nonnumeric
            );

        });

        function onSuccess(result) {
            console.log("Your changes have been saved.");

            $(".small_inp_box").prop("disabled", false);
            $("#btn_submit").prop("disabled", false);
            $("#btn_submit").text("Login");

            $("#message").text("Your changes have been saved.", true);
            $("#message").addClass("bold");

            if ($('#message_div').is(":visible")) {
                console.log("message_div is hidden");
            }

            $("#message_div").show();
            setTimeout(function () {
                $("#message_div").hide();
            }, 5000);
        }

        function OnBegin() {
            $(".small_inp_box").prop("disabled", true);
            $("#btn_submit").prop("disabled", true);
            $("#btn_submit").text("Processing", true);
            btn_submit
        }

        function OnFailure() {
            $(".small_inp_box").prop("disabled", false);
            $("#btn_submit").prop("disabled", false);
            $("#btn_submit").text("Login");
        }

        $(".small_inp_box").focusout(function () {
            console.log("checking for invalids");
            var err_msg = "";
            var fv = $('#myform').validate();
            if (!$(this).valid()) {
                $(this).removeClass("lgreen");
                $(this).addClass("lred");
            }
            else {
                $(this).addClass("lgreen");
                $(this).removeClass("lred");
                console.log("valid!");
            }
        });

    </script>
}
